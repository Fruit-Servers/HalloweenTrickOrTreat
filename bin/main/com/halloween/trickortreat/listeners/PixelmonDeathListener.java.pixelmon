package com.halloween.trickortreat.listeners;

import com.halloween.trickortreat.TrickOrTreatPlugin;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;

import java.lang.reflect.Method;
import java.util.Random;

/**
 * Pixelmon Death Listener - Uses reflection to avoid compile-time dependencies
 * This listener handles Pokemon defeat and capture events for candy drops
 */
public class PixelmonDeathListener {
    
    private final TrickOrTreatPlugin plugin;
    private final Random random;
    
    public PixelmonDeathListener(TrickOrTreatPlugin plugin) {
        this.plugin = plugin;
        this.random = new Random();
    }
    
    // This method will be called via reflection when BeatWildPixelmonEvent occurs
    public void onBeatWildPokemon(Object event) {
        try {
            if (!plugin.getConfigManager().isPixelmonDropEnabled()) {
                return;
            }
            
            // Use reflection to get player and pokemon from event
            Object playerObj = event.getClass().getField("player").get(event);
            Player player = (Player) playerObj.getClass().getMethod("getBukkitEntity").invoke(playerObj);
            
            Object wppObj = event.getClass().getField("wpp").get(event);
            Object[] allPokemon = (Object[]) wppObj.getClass().getField("allPokemon").get(wppObj);
            
            if (allPokemon.length > 0 && allPokemon[0] != null) {
                Object pokemon = allPokemon[0];
                
                if (shouldDropCandyFromPokemon(pokemon)) {
                    Object entityObj = wppObj.getClass().getMethod("getEntity").invoke(wppObj);
                    Object bukkitEntity = entityObj.getClass().getMethod("getBukkitEntity").invoke(entityObj);
                    Location location = ((org.bukkit.entity.Entity) bukkitEntity).getLocation();
                    
                    handleCandyDrop(player, location);
                }
            }
        } catch (Exception e) {
            plugin.getLogger().warning("Error handling BeatWildPixelmonEvent: " + e.getMessage());
        }
    }
    
    // This method will be called via reflection when CaptureEvent.SuccessfulCapture occurs
    public void onPokemonCapture(Object event) {
        try {
            if (!plugin.getConfigManager().isPixelmonDropEnabled()) {
                return;
            }
            
            if (!plugin.getConfigManager().canDropFromCapture()) {
                return;
            }
            
            // Use reflection to get player and pokemon from capture event
            Object playerObj = event.getClass().getMethod("getPlayer").invoke(event);
            Player player = (Player) playerObj.getClass().getMethod("getBukkitEntity").invoke(playerObj);
            
            Object pixelmonEntityObj = event.getClass().getMethod("getPokemon").invoke(event);
            Object pokemon = pixelmonEntityObj.getClass().getMethod("getPokemon").invoke(pixelmonEntityObj);
            
            if (shouldDropCandyFromPokemon(pokemon)) {
                Object bukkitEntity = pixelmonEntityObj.getClass().getMethod("getBukkitEntity").invoke(pixelmonEntityObj);
                Location location = ((org.bukkit.entity.Entity) bukkitEntity).getLocation();
                
                handleCandyDrop(player, location);
            }
        } catch (Exception e) {
            plugin.getLogger().warning("Error handling CaptureEvent: " + e.getMessage());
        }
    }
    
    private boolean shouldDropCandyFromPokemon(Object pokemon) {
        try {
            if (pokemon == null) {
                return false;
            }
            
            // Check if legendary using reflection
            Method isLegendaryMethod = pokemon.getClass().getMethod("isLegendary");
            boolean isLegendary = (Boolean) isLegendaryMethod.invoke(pokemon);
            
            if (isLegendary && !plugin.getConfigManager().canDropFromLegendary()) {
                return false;
            }
            
            // Check if ultra beast using reflection
            try {
                Method isUltraBeastMethod = pokemon.getClass().getMethod("isUltraBeast");
                boolean isUltraBeast = (Boolean) isUltraBeastMethod.invoke(pokemon);
                
                if (isUltraBeast && !plugin.getConfigManager().canDropFromUltraBeast()) {
                    return false;
                }
            } catch (NoSuchMethodException e) {
                // Method doesn't exist in this version, ignore
            }
            
            // Check if shiny using reflection
            Method isShinyMethod = pokemon.getClass().getMethod("isShiny");
            boolean isShiny = (Boolean) isShinyMethod.invoke(pokemon);
            
            if (isShiny && plugin.getConfigManager().hasShinyBonus()) {
                return random.nextDouble() * 100.0 <= plugin.getConfigManager().getShinyDropChance();
            }
            
            return true;
            
        } catch (Exception e) {
            plugin.getLogger().warning("Error checking Pokemon properties: " + e.getMessage());
            return true; // Default to allowing drops if we can't check
        }
    }
    
    private void handleCandyDrop(Player player, Location location) {
        double dropChance = plugin.getConfigManager().getPixelmonDropChance();
        double roll = random.nextDouble() * 100.0;
        
        if (roll <= dropChance) {
            double rareRoll = random.nextDouble() * 100.0;
            
            if (rareRoll <= plugin.getConfigManager().getPixelmonRareChance() && 
                plugin.getRareCandyManager().canReceiveRareCandy(player)) {
                
                if (plugin.getCooldownManager().isOnRareCandyCooldown(player)) {
                    long remaining = plugin.getCooldownManager().getRareCandyCooldownRemaining(player);
                    String timeLeft = plugin.getCooldownManager().formatCooldownTime(remaining);
                    player.sendMessage("§c⏰ You must wait " + timeLeft + " before receiving another rare candy!");
                } else {
                    ItemStack rareCandy = plugin.getRareCandyManager().createRareCandyItem();
                    location.getWorld().dropItemNaturally(location, rareCandy);
                    plugin.getRareCandyManager().recordRareCandyDrop(player);
                    plugin.getCooldownManager().setRareCandyCooldown(player);
                    
                    player.sendMessage(plugin.getConfigManager().getMessage("rare-candy-received"));
                }
            } else {
                ItemStack candy = plugin.getCandyManager().createCandyItem();
                location.getWorld().dropItemNaturally(location, candy);
                
                player.sendMessage(plugin.getConfigManager().getMessage("candy-received"));
            }
        }
    }
}
